import { ChangeDetectionStrategy, Component, input, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class UiAvatarComponent {
    size = input('md', ...(ngDevMode ? [{ debugName: "size" }] : []));
    src = input('', ...(ngDevMode ? [{ debugName: "src" }] : []));
    alt = input('', ...(ngDevMode ? [{ debugName: "alt" }] : []));
    fallback = input('', ...(ngDevMode ? [{ debugName: "fallback" }] : []));
    imageError = signal(false, ...(ngDevMode ? [{ debugName: "imageError" }] : []));
    onImageError() {
        this.imageError.set(true);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.3.3", ngImport: i0, type: UiAvatarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "20.3.3", type: UiAvatarComponent, isStandalone: true, selector: "ui-avatar", inputs: { size: { classPropertyName: "size", publicName: "size", isSignal: true, isRequired: false, transformFunction: null }, src: { classPropertyName: "src", publicName: "src", isSignal: true, isRequired: false, transformFunction: null }, alt: { classPropertyName: "alt", publicName: "alt", isSignal: true, isRequired: false, transformFunction: null }, fallback: { classPropertyName: "fallback", publicName: "fallback", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "attr.data-slot": "\"avatar\"", "attr.data-size": "size()" } }, ngImport: i0, template: "<div class=\"ui-avatar\">\n  <img \n    *ngIf=\"src()\" \n    class=\"ui-avatar__image\"\n    [src]=\"src()\" \n    [alt]=\"alt()\"\n    (error)=\"onImageError()\"\n  />\n  <div \n    *ngIf=\"!src() || imageError()\" \n    class=\"ui-avatar__fallback\"\n  >\n    {{ fallback() }}\n  </div>\n</div>\n", styles: [":host{display:block}.ui-avatar{position:relative;display:flex;flex-shrink:0;overflow:hidden;border-radius:50%;background-color:var(--avatar-bg, hsl(var(--muted)))}.ui-avatar__image{aspect-ratio:1;width:100%;height:100%;object-fit:cover}.ui-avatar__fallback{display:flex;width:100%;height:100%;align-items:center;justify-content:center;border-radius:50%;background-color:var(--avatar-bg, hsl(var(--muted)));color:var(--avatar-fg, hsl(var(--muted-foreground)));font-weight:var(--avatar-font-weight, 500)}:host([data-size=sm]) .ui-avatar{width:var(--avatar-size-sm, 2rem);height:var(--avatar-size-sm, 2rem)}:host([data-size=sm]) .ui-avatar__fallback{font-size:var(--avatar-font-size-sm, .75rem)}:host([data-size=md]) .ui-avatar{width:var(--avatar-size-md, 2.5rem);height:var(--avatar-size-md, 2.5rem)}:host([data-size=md]) .ui-avatar__fallback{font-size:var(--avatar-font-size-md, .875rem)}:host([data-size=lg]) .ui-avatar{width:var(--avatar-size-lg, 3rem);height:var(--avatar-size-lg, 3rem)}:host([data-size=lg]) .ui-avatar__fallback{font-size:var(--avatar-font-size-lg, 1rem)}:host([data-size=xl]) .ui-avatar{width:var(--avatar-size-xl, 4rem);height:var(--avatar-size-xl, 4rem)}:host([data-size=xl]) .ui-avatar__fallback{font-size:var(--avatar-font-size-xl, 1.25rem)}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.3.3", ngImport: i0, type: UiAvatarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ui-avatar', standalone: true, imports: [CommonModule], changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[attr.data-slot]': '"avatar"',
                        '[attr.data-size]': 'size()',
                    }, template: "<div class=\"ui-avatar\">\n  <img \n    *ngIf=\"src()\" \n    class=\"ui-avatar__image\"\n    [src]=\"src()\" \n    [alt]=\"alt()\"\n    (error)=\"onImageError()\"\n  />\n  <div \n    *ngIf=\"!src() || imageError()\" \n    class=\"ui-avatar__fallback\"\n  >\n    {{ fallback() }}\n  </div>\n</div>\n", styles: [":host{display:block}.ui-avatar{position:relative;display:flex;flex-shrink:0;overflow:hidden;border-radius:50%;background-color:var(--avatar-bg, hsl(var(--muted)))}.ui-avatar__image{aspect-ratio:1;width:100%;height:100%;object-fit:cover}.ui-avatar__fallback{display:flex;width:100%;height:100%;align-items:center;justify-content:center;border-radius:50%;background-color:var(--avatar-bg, hsl(var(--muted)));color:var(--avatar-fg, hsl(var(--muted-foreground)));font-weight:var(--avatar-font-weight, 500)}:host([data-size=sm]) .ui-avatar{width:var(--avatar-size-sm, 2rem);height:var(--avatar-size-sm, 2rem)}:host([data-size=sm]) .ui-avatar__fallback{font-size:var(--avatar-font-size-sm, .75rem)}:host([data-size=md]) .ui-avatar{width:var(--avatar-size-md, 2.5rem);height:var(--avatar-size-md, 2.5rem)}:host([data-size=md]) .ui-avatar__fallback{font-size:var(--avatar-font-size-md, .875rem)}:host([data-size=lg]) .ui-avatar{width:var(--avatar-size-lg, 3rem);height:var(--avatar-size-lg, 3rem)}:host([data-size=lg]) .ui-avatar__fallback{font-size:var(--avatar-font-size-lg, 1rem)}:host([data-size=xl]) .ui-avatar{width:var(--avatar-size-xl, 4rem);height:var(--avatar-size-xl, 4rem)}:host([data-size=xl]) .ui-avatar__fallback{font-size:var(--avatar-font-size-xl, 1.25rem)}\n"] }]
        }] });
//# sourceMappingURL=ui-avatar.component.js.map